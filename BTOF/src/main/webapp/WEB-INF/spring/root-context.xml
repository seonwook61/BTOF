<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	https://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context 
	https://www.springframework.org/schema/context/spring-context.xsd
	http://mybatis.org/schema/mybatis-spring
	http://mybatis.org/schema/mybatis-spring-1.2.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-4.3.xsd"
	>
	
	<!-- Root Context: defines shared resources visible to all other web components -->
		
		<!--  Service, DAO, DB관련등 (모든곳에서 참조해야되는 설정들) 여기에  -->
		<!-- DB 관련 세팅 -->
	<!-- 커넥션 관련 설정 정보  -->
	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
		<property name="driverClassName" value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy" /> 
		<property name="jdbcUrl" value="jdbc:log4jdbc:oracle:thin:@javaking.iptime.org:1521:ORCL" />
		<property name="username" value="team03" />
		<property name="password" value="team03" />
	</bean>
	
	<!-- 커넥션 맺어줄때 사용하는 클래스 등록 -->
	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
		<constructor-arg ref="hikariConfig" />
	</bean>
	<!-- 커넥션 풀 역할
		connection(java) == session(mybatis) -->
		<!-- navermail설정 -->
	<bean id="mailSender"
		class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="smtp.naver.com" /> <!-- 메이서버 호스트 -->
		<property name="port" value="465" /> <!-- 메이서버 포트번호 -->
		<property name="username" value="seonwook61" /> <!-- 자신의 이메일 아이디 -->
		<property name="password" value="6587852ab!" /> <!-- 자신의 비밀번호 -->
		<!-- 보안연결 SSL과 관련된 설정 -->
		<property name="javaMailProperties">
			<props>
				<prop key="mail.smtp.auth">true</prop>
				<prop key="mail.smtp.starttls.enable">true</prop>
				<prop key="mail.smtps.checkserveridentity">true</prop>
				<prop key="mail.smtps.ssl.trust">*</prop>
				<prop key="mail.debug">true</prop>
				<prop key="mail.smtp.socketFactory.class">javax.net.ssl.SSLSocketFactory</prop>
			</props>
		</property>
	</bean>
	 
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="/WEB-INF/spring/mybatis-config.xml"></property>
	</bean>
	<!--  카카오페이시 요청처리해줄 RestTemplate -->
<bean id="restTemplate" class="org.springframework.web.client.RestTemplate"  />		
		<!-- mybatis로 mapper 패키지 스캔 추가 -->
		<mybatis-spring:scan base-package="com.member.mapper"/>
		<mybatis-spring:scan base-package="com.admin.mapper"/>
		<mybatis-spring:scan base-package="com.artist.mapper"/>
		<mybatis-spring:scan base-package="com.board.mapper"/>
		<mybatis-spring:scan base-package="com.common.mapper"/>
		<mybatis-spring:scan base-package="com.product.mapper"/>
		<!-- spring에 service 패키지 스캔 추가 -->
		<!-- ** aop ** -->
		<context:component-scan base-package="com.admin.service">
		</context:component-scan>
		<context:component-scan base-package="com.artist.service">
		</context:component-scan>
		<context:component-scan base-package="com.board.service">
		</context:component-scan>
		<context:component-scan base-package="com.common.service">
		</context:component-scan>
		<context:component-scan base-package="com.member.service">
		</context:component-scan>
		<context:component-scan base-package="com.product.service">
		</context:component-scan>
		<!-- ** aop ** -->
	<!-- #2. aop 테스트할 서비스패키지 스캔추가 : 서비스클래스 스프링이 객체 생성해서 관리-->
	<context:component-scan base-package="com.aop.service" /> 
	
	<!-- #4. aop 스키마 추가, advice 패키지 컴포넌트 스캔, autoproxy 태그 추가  -->
	
	<!-- 어드바이스 패키지 스캔 : 어드바이스 패키지 객체생성해서 관리도ㅓㅣ도록 -->
	<context:component-scan base-package="com.aop.advice" /> 
	<!-- @Aspect 어노테이션으로 설정된 빈 객체를 Aspect로 사용하게 해줌. -->
	
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>  
	
		
		
</beans>
